import dearpygui.dearpygui as dpg
import dearpygui._dearpygui as internal_dpg
import os, pathlib, datetime, time
import fileseq

class FileBrowser:

	# constants
	PATH_INPUT_STYLE_TEXT_ONLY = 0 
	PATH_INPUT_STYLE_BREADCRUMB = 1 
	PATH_INPUT_STYLE_BOTH = 2 
	
	PAYLOAD_TYPE = 'dpge_filebrowser'

	ICON_FILE        = 'dpge_filebrowser_icon_file'
	ICON_FILES       = 'dpge_filebrowser_icon_dragfiles'
	ICON_FOLDER      = 'dpge_filebrowser_icon_folder'
	
	FILETYPE_FILTER_DEFAULT = [
			{'label': 'All files',     'formats': ['*']},
			{'label': 'Images',        'formats': ['png','jpg','tif','exr','svg','gif','bmp','psd','tex','ai']},
			{'label': 'Videos',        'formats': ['mp4','mov','mkv','mpg','mpeg','webm','wmv','h264','avi']},
			{'label': 'Audio',         'formats': ['mp3','wav','aif','mid','midi','mpa','ogg','wma']},
			{'label': 'Documents',     'formats': ['pdf','doc','txt','rtf','odt']},
			{'label': 'Spreadsheets',  'formats': ['csv','ods','xls','xlsm','xlsx']},
			{'label': 'Code',          'formats': ['py','java','php','sh','cpp','c','h','html','js','css']},		
			{'label': 'Compressed',    'formats': ['zip','7z','tar.gz','rar','pkg','rpm','deb','arj']},		
		]

	def __init__(
		self,
		label='Choose file',
		width=-1,
		height=500,
		parent=None,
		default_path='~',
		collapse_sequences=True,
		collapse_sequences_checkbox=True,
		sequence_padding='#',
		show_hidden_files=False,
		path_input_style=PATH_INPUT_STYLE_BREADCRUMB,
		add_filename_tooltip=False,
		tooltip_min_length=100,
		icon_size=1,
		filetype_filter=None,
		filetype_filter_default=0,
		expand_sequences_on_callback=True,
		allow_multi_selection=True,
		allow_drag=True,
		allow_create_new_folder=True,
		dirs_only=False,
		show_as_window=False,
		modal_window=False,
		show_ok_cancel=False,
		show_nav_icons=True,
		callback=None,
		selection_callback=None,
	):

		fb_parent = dpg.last_container() if parent is None else parent
		default_path = pathlib.Path(default_path).expanduser().resolve() if default_path is not None else pathlib.Path('~').expanduser()
		tag_prefix = 'dpge_filebrowser' # all file browser item tags will have this prefix, so they don't clash with other tags in your code
		fb_payload_type = self.PAYLOAD_TYPE # payload name for pairing with drop callbacks on other elements of the UI
		col_widths = (0.6, 0.15, 0.25) # normalized width distribution for "name" | "size" | "date modified" columns
		filetype_filter = filetype_filter or self.FILETYPE_FILTER_DEFAULT
		self.popups_created=[]

		# built-in icons 
		# -- FILE -- #
		icon_data_file       = [0, 0, 0, 0, 0, 0, 0, 0, 153, 153, 153, 35, 160, 160, 160, 89, 160, 160, 160, 89, 160, 160, 160, 89, 160, 160, 160, 89, 160, 160, 160, 89, 160, 160, 160, 89, 163, 163, 163, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 141, 141, 143, 212, 212, 212, 255, 213, 213, 213, 255, 213, 213, 213, 255, 213, 213, 213, 255, 213, 213, 213, 255, 213, 213, 213, 255, 192, 192, 192, 255, 153, 153, 153, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 143, 143, 143, 214, 214, 214, 255, 215, 215, 215, 255, 215, 215, 215, 255, 215, 215, 215, 255, 215, 215, 215, 255, 215, 215, 215, 255, 204, 204, 204, 255, 194, 194, 194, 255, 149, 149, 149, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143, 143, 143, 143, 216, 216, 216, 255, 216, 216, 216, 255, 217, 217, 217, 255, 217, 217, 217, 255, 217, 217, 217, 255, 217, 217, 217, 255, 209, 209, 209, 255, 169, 169, 169, 255, 190, 190, 190, 255, 144, 144, 144, 186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 144, 144, 143, 218, 218, 218, 255, 218, 218, 218, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 218, 218, 218, 255, 215, 215, 215, 255, 189, 189, 189, 255, 190, 190, 190, 255, 198, 198, 198, 254, 142, 142, 142, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 143, 219, 219, 219, 255, 220, 220, 220, 255, 220, 220, 220, 255, 221, 221, 221, 255, 221, 221, 221, 255, 220, 220, 220, 255, 220, 220, 220, 255, 219, 219, 219, 255, 219, 219, 219, 255, 218, 218, 218, 255, 144, 144, 144, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 146, 146, 143, 221, 221, 221, 255, 222, 222, 222, 255, 222, 222, 222, 255, 222, 222, 222, 255, 222, 222, 222, 255, 222, 222, 222, 255, 222, 222, 222, 255, 221, 221, 221, 255, 220, 220, 220, 255, 219, 219, 219, 255, 144, 144, 144, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 148, 148, 143, 223, 223, 223, 255, 223, 223, 223, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 224, 224, 224, 255, 223, 223, 223, 255, 222, 222, 222, 255, 221, 221, 221, 255, 145, 145, 145, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 148, 148, 143, 224, 224, 224, 255, 225, 225, 225, 255, 226, 226, 226, 255, 226, 226, 226, 255, 226, 226, 226, 255, 226, 226, 226, 255, 225, 225, 225, 255, 225, 225, 225, 255, 224, 224, 224, 255, 223, 223, 223, 255, 145, 145, 145, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 148, 148, 148, 143, 225, 225, 225, 255, 226, 226, 226, 255, 227, 227, 227, 255, 228, 228, 228, 255, 228, 228, 228, 255, 228, 228, 228, 255, 227, 227, 227, 255, 226, 226, 226, 255, 225, 225, 225, 255, 224, 224, 224, 255, 147, 147, 147, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 150, 150, 143, 227, 227, 227, 255, 228, 228, 228, 255, 229, 229, 229, 255, 229, 229, 229, 255, 230, 230, 230, 255, 230, 230, 230, 255, 229, 229, 229, 255, 228, 228, 228, 255, 227, 227, 227, 255, 225, 225, 225, 255, 149, 149, 149, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 150, 150, 143, 228, 228, 228, 255, 229, 229, 229, 255, 230, 230, 230, 255, 231, 231, 231, 255, 232, 232, 232, 255, 231, 231, 231, 255, 231, 231, 231, 255, 230, 230, 230, 255, 228, 228, 228, 255, 227, 227, 227, 255, 149, 149, 149, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 152, 152, 143, 229, 229, 229, 255, 230, 230, 230, 255, 232, 232, 232, 255, 233, 233, 233, 255, 233, 233, 233, 255, 233, 233, 233, 255, 232, 232, 232, 255, 231, 231, 231, 255, 230, 230, 230, 255, 228, 228, 228, 255, 149, 149, 149, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 152, 152, 143, 229, 229, 229, 255, 231, 231, 231, 255, 233, 233, 233, 255, 234, 234, 234, 255, 235, 235, 235, 255, 235, 235, 235, 255, 234, 234, 234, 255, 232, 232, 232, 255, 231, 231, 231, 255, 229, 229, 229, 255, 151, 151, 151, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 152, 152, 143, 230, 230, 230, 255, 231, 231, 231, 255, 233, 233, 233, 255, 235, 235, 235, 255, 237, 237, 237, 255, 237, 237, 237, 255, 235, 235, 235, 255, 233, 233, 233, 255, 231, 231, 231, 255, 229, 229, 229, 255, 151, 151, 151, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 28, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0]
		icon_data_file       = [float(x)/255 for x in icon_data_file]
		icon_res_file        = (16,16)
		icon_tag_file        = self.ICON_FILE
		# -- FOLDER -- #
		icon_data_folder     = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 159, 87, 17, 236, 213, 118, 129, 236, 213, 118, 129, 236, 213, 118, 129, 234, 211, 117, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 193, 109, 64, 219, 198, 116, 156, 248, 224, 128, 255, 248, 224, 128, 255, 248, 224, 128, 255, 245, 221, 126, 250, 216, 195, 114, 137, 215, 195, 114, 138, 215, 195, 114, 138, 216, 195, 114, 137, 217, 196, 116, 136, 218, 197, 116, 136, 219, 198, 117, 135, 223, 202, 118, 134, 0, 0, 0, 0, 0, 0, 0, 0, 206, 194, 154, 134, 243, 241, 236, 255, 235, 233, 228, 255, 228, 226, 219, 255, 226, 224, 219, 255, 225, 223, 218, 255, 223, 221, 217, 255, 223, 221, 218, 255, 223, 222, 218, 255, 224, 222, 219, 255, 227, 226, 222, 255, 229, 227, 224, 255, 230, 229, 225, 255, 229, 225, 213, 255, 0, 0, 0, 9, 0, 0, 0, 4, 204, 193, 160, 135, 252, 252, 252, 255, 248, 224, 133, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 254, 229, 127, 253, 219, 197, 109, 63, 203, 193, 160, 135, 252, 252, 251, 255, 255, 230, 127, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 250, 226, 125, 231, 188, 169, 93, 25, 203, 193, 160, 135, 251, 250, 250, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 244, 220, 122, 193, 0, 0, 0, 3, 203, 193, 160, 135, 240, 239, 238, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 234, 211, 117, 136, 0, 0, 0, 0, 204, 193, 160, 135, 232, 226, 208, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 216, 195, 108, 75, 0, 0, 0, 0, 184, 171, 126, 135, 243, 222, 138, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 139, 125, 67, 4, 0, 0, 0, 0, 190, 171, 96, 136, 253, 228, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 0, 0, 0, 0, 0, 0, 0, 0, 196, 176, 97, 75, 220, 198, 110, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 221, 199, 110, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		icon_data_folder     = [float(x)/255 for x in icon_data_folder]
		icon_res_folder      = (16,16)
		icon_tag_folder      = self.ICON_FOLDER
		# -- DRAG FILES -- #
		icon_data_drag       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 1, 1, 255, 203, 206, 207, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 232, 236, 237, 255, 196, 199, 200, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 150, 153, 153, 255, 15, 17, 21, 255, 209, 212, 213, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 150, 153, 153, 255, 189, 195, 199, 255, 15, 17, 21, 255, 209, 212, 213, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 85, 86, 86, 255, 150, 153, 153, 255, 150, 153, 153, 255, 10, 10, 10, 255, 209, 212, 213, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 65, 71, 85, 255, 143, 156, 187, 255, 143, 156, 187, 255, 66, 74, 92, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 232, 236, 237, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 80, 90, 112, 255, 113, 115, 116, 255, 60, 65, 78, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 153, 153, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 236, 240, 241, 255, 209, 212, 213, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 150, 153, 153, 255, 124, 126, 127, 255, 80, 90, 112, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 135, 148, 177, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 140, 153, 184, 255, 153, 171, 213, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 177, 193, 231, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 184, 201, 241, 255, 80, 90, 112, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 135, 148, 177, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 143, 156, 187, 255, 66, 74, 92, 255, 134, 149, 186, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 66, 74, 92, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 71, 79, 99, 255, 79, 89, 111, 255, 147, 165, 205, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 137, 153, 190, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 153, 171, 213, 255, 109, 111, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 132, 147, 183, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 147, 165, 205, 255, 80, 90, 112, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		icon_data_drag       = [float(x)/255 for x in icon_data_drag]
		icon_res_drag        = (32,32)
		icon_tag_drag        = self.ICON_FILES
		# -- HOME FOLDER -- #
		icon_data_home       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 31, 31, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 11, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 18, 18, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 1, 18, 18, 18, 10, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 18, 18, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 1, 18, 18, 18, 10, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 18, 18, 18, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 1, 18, 18, 18, 16, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 3, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 18, 18, 18, 1, 0, 0, 0, 0, 18, 18, 18, 3, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 18, 18, 18, 5, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 68, 68, 68, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 18, 18, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 18, 18, 18, 255, 0, 0, 0, 0]
		icon_data_home       = [float(x)/255 for x in icon_data_home]
		icon_res_home        = (16,16)
		icon_tag_home        = f'{tag_prefix}_icon_home'
		# -- SYMLINK -- #
		icon_data_link       = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 159, 87, 17, 236, 213, 118, 129, 236, 213, 118, 129, 236, 213, 118, 129, 234, 211, 117, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 214, 193, 109, 64, 219, 198, 116, 156, 248, 224, 128, 255, 248, 224, 128, 255, 248, 224, 128, 255, 245, 221, 126, 250, 216, 195, 114, 137, 215, 195, 114, 138, 215, 195, 114, 138, 216, 195, 114, 137, 217, 196, 116, 136, 218, 197, 116, 136, 219, 198, 117, 135, 223, 202, 118, 134, 0, 0, 0, 0, 0, 0, 0, 0, 206, 194, 154, 134, 243, 241, 236, 255, 235, 233, 228, 255, 228, 226, 219, 255, 226, 224, 219, 255, 225, 223, 218, 255, 223, 221, 217, 255, 223, 221, 218, 255, 223, 222, 218, 255, 224, 222, 219, 255, 227, 226, 222, 255, 229, 227, 224, 255, 230, 229, 225, 255, 229, 225, 213, 255, 0, 0, 0, 9, 0, 0, 0, 4, 204, 193, 160, 135, 252, 252, 252, 255, 248, 224, 133, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 254, 229, 127, 253, 219, 197, 109, 63, 203, 193, 160, 135, 252, 252, 251, 255, 255, 230, 127, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 188, 169, 93, 25, 203, 193, 160, 135, 251, 250, 250, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 42, 79, 169, 255, 42, 79, 169, 255, 113, 127, 184, 255, 238, 239, 241, 255, 244, 244, 245, 255, 243, 243, 244, 255, 243, 243, 244, 255, 42, 79, 169, 255, 0, 0, 0, 3, 203, 193, 160, 135, 240, 239, 238, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 42, 79, 169, 255, 42, 79, 169, 255, 43, 80, 170, 255, 42, 79, 169, 255, 243, 243, 244, 255, 245, 245, 245, 255, 241, 241, 243, 255, 42, 79, 169, 255, 0, 0, 0, 0, 204, 193, 160, 135, 232, 226, 208, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 243, 243, 244, 255, 243, 243, 244, 255, 77, 100, 175, 255, 243, 243, 244, 255, 42, 79, 169, 255, 0, 0, 0, 0, 184, 171, 126, 135, 243, 222, 138, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 42, 79, 169, 255, 42, 79, 169, 255, 236, 237, 240, 255, 244, 244, 245, 255, 44, 80, 170, 255, 42, 79, 169, 255, 116, 130, 185, 255, 42, 79, 169, 255, 0, 0, 0, 0, 190, 171, 96, 136, 253, 228, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 42, 79, 169, 255, 236, 237, 240, 255, 243, 243, 244, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 255, 42, 79, 169, 152, 0, 0, 0, 0, 196, 176, 97, 75, 220, 198, 110, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 219, 197, 109, 154, 159, 150, 145, 195, 139, 135, 152, 208, 159, 150, 145, 195, 159, 150, 145, 195, 159, 150, 145, 195, 159, 150, 145, 195, 160, 151, 145, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		icon_data_link       = [float(x)/255 for x in icon_data_link]
		icon_res_link        = (16,16)
		icon_tag_link        = f'{tag_prefix}_icon_link'
		# -- ADD FOLDER -- #
		icon_data_addfolder  = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 133, 68, 22, 28, 133, 68, 22, 28, 133, 68, 143, 28, 133, 68, 221, 28, 133, 68, 255, 28, 133, 68, 218, 28, 133, 68, 223, 28, 133, 68, 134, 28, 133, 68, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 133, 68, 22, 28, 133, 68, 175, 28, 133, 68, 175, 72, 142, 92, 255, 217, 219, 217, 255, 222, 223, 222, 255, 220, 220, 220, 255, 67, 141, 89, 255, 28, 133, 68, 255, 28, 133, 68, 174, 28, 133, 68, 22, 0, 0, 0, 0, 177, 159, 87, 17, 236, 213, 118, 129, 236, 213, 118, 129, 236, 213, 118, 129, 216, 200, 111, 130, 28, 133, 68, 175, 28, 133, 68, 205, 77, 144, 96, 255, 215, 217, 215, 255, 222, 222, 222, 255, 223, 223, 223, 255, 67, 141, 89, 255, 28, 133, 68, 255, 28, 133, 68, 174, 28, 133, 68, 22, 214, 193, 109, 64, 219, 198, 116, 156, 248, 224, 128, 255, 248, 224, 128, 255, 248, 224, 128, 255, 176, 181, 100, 253, 28, 133, 68, 255, 28, 133, 68, 255, 62, 139, 85, 255, 201, 208, 202, 255, 223, 223, 223, 255, 222, 222, 222, 255, 60, 138, 83, 255, 28, 133, 68, 255, 28, 133, 68, 255, 28, 133, 68, 173, 206, 194, 154, 134, 243, 241, 236, 255, 235, 233, 228, 255, 228, 226, 219, 255, 226, 224, 219, 255, 97, 151, 108, 255, 217, 219, 217, 255, 221, 222, 222, 255, 221, 222, 221, 255, 222, 222, 222, 255, 224, 224, 224, 255, 222, 222, 222, 255, 220, 221, 220, 255, 222, 222, 222, 255, 219, 220, 219, 255, 28, 133, 68, 249, 204, 193, 160, 135, 252, 252, 252, 255, 248, 224, 133, 255, 255, 230, 128, 255, 255, 230, 128, 255, 28, 133, 68, 255, 222, 223, 222, 255, 223, 223, 223, 255, 223, 223, 223, 255, 223, 223, 223, 255, 223, 223, 223, 255, 223, 223, 223, 255, 223, 223, 223, 255, 223, 223, 223, 255, 223, 223, 223, 255, 28, 133, 68, 255, 203, 193, 160, 135, 252, 252, 251, 255, 255, 230, 127, 255, 255, 230, 128, 255, 255, 230, 128, 255, 110, 152, 80, 255, 217, 219, 217, 255, 221, 222, 221, 255, 222, 222, 222, 255, 222, 223, 222, 255, 223, 223, 223, 255, 222, 222, 222, 255, 222, 222, 222, 255, 222, 222, 222, 255, 221, 221, 221, 255, 38, 134, 69, 222, 203, 193, 160, 135, 251, 250, 250, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 110, 152, 80, 255, 69, 141, 90, 255, 53, 137, 80, 255, 89, 147, 105, 255, 220, 221, 220, 255, 224, 224, 224, 255, 222, 223, 222, 255, 60, 139, 84, 255, 41, 135, 74, 255, 62, 139, 85, 255, 28, 133, 68, 218, 203, 193, 160, 135, 240, 239, 238, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 184, 187, 102, 255, 28, 133, 68, 255, 28, 133, 68, 255, 71, 142, 91, 255, 221, 222, 221, 255, 222, 223, 222, 255, 222, 222, 222, 255, 51, 137, 79, 255, 28, 133, 68, 255, 28, 133, 68, 255, 28, 133, 68, 134, 204, 193, 160, 135, 232, 226, 208, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 245, 224, 124, 255, 155, 172, 92, 255, 144, 167, 89, 255, 120, 161, 129, 255, 219, 221, 219, 255, 222, 222, 222, 255, 221, 221, 221, 255, 56, 138, 82, 255, 28, 133, 68, 255, 86, 142, 74, 198, 28, 133, 68, 22, 184, 171, 126, 135, 243, 222, 138, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 245, 224, 124, 255, 245, 224, 124, 255, 184, 187, 102, 255, 110, 152, 80, 255, 28, 133, 68, 255, 110, 152, 80, 255, 110, 152, 80, 255, 184, 187, 102, 255, 61, 132, 68, 26, 0, 0, 0, 0, 200, 180, 101, 144, 254, 229, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 255, 230, 128, 255, 0, 0, 0, 0, 0, 0, 0, 0, 210, 189, 104, 88, 255, 230, 128, 253, 254, 229, 128, 252, 254, 229, 127, 249, 254, 229, 128, 252, 255, 230, 128, 253, 255, 230, 128, 254, 255, 230, 128, 255, 255, 230, 128, 254, 254, 229, 128, 252, 253, 229, 127, 247, 253, 229, 127, 247, 252, 227, 126, 241, 254, 229, 127, 248, 255, 230, 128, 17, 0, 0, 0, 0, 255, 230, 128, 37, 255, 230, 128, 251, 255, 230, 128, 248, 255, 230, 128, 253, 255, 230, 128, 254, 255, 230, 128, 253, 255, 230, 128, 253, 255, 230, 128, 253, 255, 230, 128, 249, 255, 230, 128, 246, 255, 230, 128, 249, 255, 230, 128, 246, 255, 230, 128, 251, 255, 230, 128, 252, 0, 0, 0, 0, 0, 0, 0, 0, 255, 230, 128, 37, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 255, 230, 128, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 230, 128, 14, 255, 230, 128, 14, 255, 230, 128, 9, 255, 230, 128, 11, 255, 230, 128, 15, 255, 230, 128, 15, 255, 230, 128, 15, 255, 230, 128, 15, 255, 230, 128, 15, 255, 230, 128, 15, 255, 230, 128, 23, 255, 230, 128, 13, 0, 0, 0, 0, 0, 0, 0, 0]
		icon_data_addfolder  = [float(x)/255 for x in icon_data_addfolder]
		icon_res_addfolder   = (16,16)
		icon_tag_addfolder   = f'{tag_prefix}_icon_addfolder'
				
		# init item registry (executes only once)
		first_instance = not dpg.does_item_exist(icon_tag_file)
		
		_fb_item_selected    = f'{tag_prefix}_theme_item_selected'
		_fb_item_unselected  = f'{tag_prefix}_theme_item_unselected'
		_fb_searchbox_active = f'{tag_prefix}_theme_searchbox_active'
		_fb_popup_border     = f'{tag_prefix}_theme_popup_border'

		if first_instance:
			
			# register textures
			with dpg.texture_registry(label=f'{tag_prefix}_textures'):
				dpg.add_static_texture(label='Filebrowser Icon - File',       width=icon_res_file[0],      height=icon_res_file[1],      default_value=icon_data_file,      tag=icon_tag_file)
				dpg.add_static_texture(label='Filebrowser Icon - Folder',     width=icon_res_folder[0],    height=icon_res_folder[1],    default_value=icon_data_folder,    tag=icon_tag_folder)
				dpg.add_static_texture(label='Filebrowser Icon - Drag Files', width=icon_res_drag[0],      height=icon_res_drag[1],      default_value=icon_data_drag,      tag=icon_tag_drag)
				dpg.add_static_texture(label='Filebrowser Icon - Home',       width=icon_res_home[0],      height=icon_res_home[1],      default_value=icon_data_home,      tag=icon_tag_home)
				dpg.add_static_texture(label='Filebrowser Icon - Link',       width=icon_res_link[0],      height=icon_res_link[1],      default_value=icon_data_link,      tag=icon_tag_link)
				dpg.add_static_texture(label='Filebrowser Icon - Add Folder', width=icon_res_addfolder[0], height=icon_res_addfolder[1], default_value=icon_data_addfolder, tag=icon_tag_addfolder)
				
			# register extra themes
			# colors for selected rows
			with dpg.theme(tag=_fb_item_selected):
				with dpg.theme_component(dpg.mvSelectable):
					dpg.add_theme_color(dpg.mvThemeCol_Header, (0,119,200,153))
			# colors for unselected rows
			with dpg.theme(tag=_fb_item_unselected):
				with dpg.theme_component(dpg.mvSelectable):
					dpg.add_theme_color(dpg.mvThemeCol_Header, (51, 51, 55, 255))
			# colors for text "Search" when filename search box is being used
			with dpg.theme(tag=_fb_searchbox_active):
				with dpg.theme_component(dpg.mvText):
					dpg.add_theme_color(dpg.mvThemeCol_Text, (255, 255, 0, 255))
			# colors for border of "Create new folder" popup
			with dpg.theme(tag=_fb_popup_border):
				with dpg.theme_component(dpg.mvWindowAppItem):
					dpg.add_theme_style(dpg.mvStyleVar_PopupBorderSize, 1)
					dpg.add_theme_color(dpg.mvThemeCol_Border, (200,200,200,255))

		# init global vars
		_fb_current_sorting_type = 'name'
		_fb_current_sorting_desc = False	
		_fb_last_selected = None
		_fb_breadcrumb_curpath = default_path
		_fb_prevpath = default_path
		_fb_new_folder_popup = None

		# utility to display a simple info box (errors, etc)
		def _fb_show_info_box(content='', label='Filebrowser Error'):
			with dpg.mutex():
				viewport_width = dpg.get_viewport_client_width()
				viewport_height = dpg.get_viewport_client_height()
			
			with dpg.window(label=label) as infobox:
				dpg.add_text(content)
				dpg.add_button(label="Ok", width=75, callback=lambda x: dpg.delete_item(infobox))
				
			dpg.split_frame()
			width = dpg.get_item_width(infobox)
			height = dpg.get_item_height(infobox)
			dpg.set_item_pos(infobox, [viewport_width // 2 - width // 2, viewport_height // 2 - height // 2])
		
		# custom behavior for selectables (add multi-selection with CTRL/SHIFT keys)
		def _fb_selection(sender, app_data, user_data):
			nonlocal _fb_last_selected
			nonlocal allow_multi_selection

			if allow_multi_selection:
				
				if dpg.is_key_down(dpg.mvKey_Shift):
					if not _fb_last_selected:
						_fb_last_selected = sender
						dpg.set_value(sender, True)
						return

					prev_index = user_data['all_selectables'].index(_fb_last_selected)
					cur_index = user_data['all_selectables'].index(sender)

					if prev_index < cur_index:
						items_to_set_true = user_data['all_selectables'][prev_index:cur_index + 1]
					else:
						items_to_set_true = user_data['all_selectables'][cur_index:prev_index + 1]
					
					for item in items_to_set_true:
						dpg.set_value(item, True)

				elif dpg.is_key_down(dpg.mvKey_Control):
					dpg.set_value(sender, dpg.get_value(sender))

				else:
					for item in user_data['all_selectables']:
						dpg.set_value(item, False)
					dpg.set_value(sender, True)
			
			else:
				for item in user_data['all_selectables']:
					dpg.set_value(item, False)
				dpg.set_value(sender, True)

			for item in user_data['all_selectables']:
				if dpg.get_value(item) is True:
					dpg.bind_item_theme(item, _fb_item_selected)
				else:
					dpg.bind_item_theme(item, _fb_item_unselected)

			_fb_last_selected = sender


		# set current folder on double click
		def _fb_set_path_from_clicked_folder(sender, app_data, user_data):
			path = pathlib.Path(dpg.get_value(f'{tag_prefix}_path')).expanduser()
			item_type = dpg.get_item_type(app_data[1])
			sel_item = dpg.get_item_configuration(app_data[1])['label']
			if item_type=='mvAppItemType::mvImage':
				sel_item = dpg.get_item_configuration(app_data[1])['user_data']
			rows = dpg.get_item_children(f'{tag_prefix}_main_table', 1)
			grps = [dpg.get_item_children(x, 1)[0] for x in rows]
			cells = [dpg.get_item_children(x, 1)[1] for x in grps]
			labels = [dpg.get_item_configuration(cell)['label'] for cell in cells]
			sel_index = labels.index(sel_item)
			data = dpg.get_item_configuration(rows[sel_index])['user_data']
			if data['is_folder']: 
				path = path/sel_item
				dpg.set_value(f'{tag_prefix}_path', path.resolve())
				_fb_populate_files()
			else:
				if callback:
					# get files
					files = []
					if expand_sequences_on_callback and data['is_sequence']:
						files.extend([x for x in data['sequence']])
					else:
						files.append(data['path'])
					
					if callback.__code__.co_argcount==0: callback()
					if callback.__code__.co_argcount==1: callback(sender)
					if callback.__code__.co_argcount==2: callback(sender, files)
					if callback.__code__.co_argcount==3: callback(sender, files, False)

					if show_as_window: 
						dpg.configure_item(f'{tag_prefix}_window', show=False)
						#clear selection 
						dpg.set_value(sender, False)
						dpg.bind_item_theme(sender, _fb_item_unselected)

		# rebuilds payload drag_data to match current selection
		last_click_time=time.time()
		def _fb_file_click(sender, app_data, user_data):
			nonlocal expand_sequences_on_callback
			nonlocal tag_prefix
			nonlocal _fb_item_selected
			nonlocal _fb_last_selected
			nonlocal allow_drag
			nonlocal selection_callback
			item_clicked = app_data[1]

			# workaround for binding both "click" AND "double-click" item handlers. 
			# Otherwise "double-click" always wins over "click" (and it does not execute!)
			nonlocal last_click_time
			is_double_click = False
			click_time = time.time()
			timedelta = click_time-last_click_time
			if timedelta*1000<=400 and item_clicked==_fb_last_selected:
				is_double_click=True
			last_click_time=time.time()
			
			if is_double_click:
				_fb_set_path_from_clicked_folder(sender, app_data, user_data)

			else:
				files=[]
				selection=[]
				selectables=[]
				table = f'{tag_prefix}_main_table'
				rows = dpg.get_item_children(table, 1)
				for row in rows:
					grp = dpg.get_item_children(row, 1)[0]
					entry = dpg.get_item_children(grp, 1)[1]
					selectables.append(entry)
					is_selected = dpg.get_item_theme(entry)==dpg.get_alias_id(_fb_item_selected)
					if is_selected: selection.append(entry)
				if item_clicked in selection:
					for entry in selection:
						data = dpg.get_item_configuration(entry)['user_data']
						if expand_sequences_on_callback and data['is_sequence']:
							files.extend([x for x in data['sequence']])
						else:
							files.append(data['path'])
				else:
					data = dpg.get_item_configuration(item_clicked)['user_data']
					if expand_sequences_on_callback and data['is_sequence']:
						files.extend([x for x in data['sequence']])
					else:
						files.append(data['path'])

				if allow_drag:
					for item in selectables:
						dpg.configure_item(f'{tag_prefix}_drag_payload_{item}', drag_data=files)

				if selection_callback:
					if selection_callback.__code__.co_argcount==0: selection_callback()
					if selection_callback.__code__.co_argcount==1: selection_callback(sender)
					if selection_callback.__code__.co_argcount==2: selection_callback(sender, files)


		# formatter for "date modified" column
		def _dateFormatter(date):
			formattedDate = '---'
			try: formattedDate = date.strftime('%b %d %Y  %H:%M')
			except: pass
			return formattedDate

		# formatter for "size" column
		def _fileSizeFormatter(size, size_format='auto'):
			# if size == -1, it's a folder! we don't compute folder sizes as it's expensive, return some fixed string instead.
			if size==-1: return '-'
			
			# if size_format = 'auto', we choose the best representation according to the file size.
			formats = ['b', 'kb', 'mb', 'gb', 'tb']
			size_formatted = f'{size} bytes'
			if size_format=='auto':
				for i, f in enumerate(formats):
					if size<(1024**(i+1)):
						size_format = formats[i]
						break

			# otherwise display using selected format
			if size_format!='b':
				size_formatted = size/(1024**formats.index(size_format))
				size_formatted = f'{size_formatted:.1f} {size_format.capitalize()}'

			return size_formatted
		
		# show current path text input for temporary editing (when breadcrumb active, and was double-clicked)
		def _fb_show_path_text_input(sender, app_data):
			if path_input_style==self.PATH_INPUT_STYLE_BREADCRUMB:
				
				# return to previous path (since the first click from a double-click will trigger "_fb_populate_files()" and change current folder!)
				dpg.set_value(f'{tag_prefix}_path', _fb_prevpath)
				_fb_populate_files()			

				# hide breadcrumb / show text input
				dpg.configure_item(f'{tag_prefix}_breadcrumb_row', show=False)
				dpg.configure_item(f'{tag_prefix}_path_input_row', show=True)
				dpg.focus_item(f'{tag_prefix}_path')

		# move up from current folder
		def _fb_move_up():
			curpath = dpg.get_value(f'{tag_prefix}_path')
			parent_folder = pathlib.Path(curpath).parent
			dpg.set_value(f'{tag_prefix}_path', parent_folder)
			_fb_populate_files()

		# move back to previous folder
		def _fb_move_back():
			nonlocal _fb_prevpath 
			prevpath = _fb_prevpath or dpg.get_value(f'{tag_prefix}_path')
			dpg.set_value(f'{tag_prefix}_path', prevpath)
			_fb_populate_files()

		# open user home folder
		def _fb_goto_home():
			dpg.set_value(f'{tag_prefix}_path', pathlib.Path('~').expanduser())
			_fb_populate_files()

		# add new folder
		def _fb_add_folder():
			nonlocal _fb_new_folder_popup
			curpath = pathlib.Path(dpg.get_value(f'{tag_prefix}_path'))
			new_folder_name=dpg.get_value(f'{tag_prefix}_new_folder_name').strip()
			new_folder = curpath / new_folder_name
			try:
				new_folder.mkdir(exist_ok=True)
				dpg.set_value(f'{tag_prefix}_path', str(new_folder))
				_fb_populate_files()
			except Exception as err:
				_fb_show_info_box(str(err))

			dpg.configure_item(_fb_new_folder_popup, show=False)
			dpg.set_value(f'{tag_prefix}_new_folder_name', '')

		# if user press ESC key while editing path manually
		def _fb_esc_path(sender, app_data):
			if dpg.is_item_focused(f'{tag_prefix}_path'):
				_fb_move_back()

		# build current folder path as breadcrumb
		def _fb_build_breadcrumb_path():

			nonlocal path_input_style
			nonlocal _fb_new_folder_popup
			
			if path_input_style != self.PATH_INPUT_STYLE_TEXT_ONLY:

				bctag = f'{tag_prefix}_breadcrumb_row'
				dpg.delete_item(bctag, children_only=True)
				#if _fb_new_folder_popup: dpg.delete_item(_fb_new_folder_popup)
				for pc in self.popups_created:
					if dpg.does_item_exist(pc): dpg.delete_item(pc)

				# only rebuilds if row visible (i.e.: user not editing path manually)
				isVisible = dpg.get_item_configuration(bctag)['show']==True

				if isVisible:
					with dpg.group(parent=bctag, horizontal=True):
							
						if show_nav_icons:
							# go back
							dpg.add_button(arrow=True, direction=internal_dpg.mvDir_Left, callback=_fb_move_back)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('Go Back')
							
							# go up
							dpg.add_button(arrow=True, direction=internal_dpg.mvDir_Up, callback=_fb_move_up)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('Go Up')
							
							# add new folder
							dpg.add_image_button(icon_tag_addfolder, width=14*icon_size, height=14*icon_size, tag=f'{tag_prefix}_add_folder_btn', show=allow_create_new_folder)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('Create new folder')
							with dpg.popup(parent=f'{tag_prefix}_add_folder_btn', no_move=True, mousebutton=internal_dpg.mvMouseButton_Left, min_size=(280,40), max_size=(280,40)) as _fb_new_folder_popup:
								self.popups_created.append(_fb_new_folder_popup)
								with dpg.group(horizontal=True):
									dpg.add_text('Name')
									dpg.add_input_text(tag=f'{tag_prefix}_new_folder_name', width=150, callback=_fb_add_folder, on_enter=True)
									dpg.add_button(label=' create ', small=True, callback=_fb_add_folder)
							dpg.bind_item_theme(_fb_new_folder_popup, _fb_popup_border)

							# user home folder
							dpg.add_image_button(icon_tag_home, width=14*icon_size, height=14*icon_size, callback=_fb_goto_home)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('User home')
														
						path = dpg.get_value(f'{tag_prefix}_path')
						path_parts = pathlib.PurePath(path).parts
						with dpg.table(header_row=False, policy=dpg.mvTable_SizingFixedFit, no_pad_innerX=True):
							for i, part in enumerate(path_parts):
								dpg.add_table_column()
								if i<len(path_parts)-1:
									dpg.add_table_column()
								
							with dpg.table_row() as breadcrumb_row:
								seps = []
								for i, part in enumerate(path_parts):
									cur_path = os.sep.join(path_parts[0:i+1])
									cur_path = cur_path.replace('//', '/')
									folders = [{'name':item.name, 'path':item.path} for item in sorted(os.scandir(cur_path), key=lambda x: x.name) if os.path.isdir(pathlib.PurePath(item)) and ((not show_hidden_files and not item.name.startswith('.')) or show_hidden_files)]
									folder_name = dpg.add_button(label=part, callback=_fb_set_path_from_breadcrumb, user_data=cur_path, small=True)
									#with dpg.tooltip(dpg.last_item()):
									#	dpg.add_text('Double click to enter path manually')

									if i<len(path_parts)-1:
										folder_sep = dpg.add_button(label=os.sep, user_data=folders,  small=True)
										with dpg.popup(dpg.last_item(), mousebutton=dpg.mvMouseButton_Left) as path_path_popup:
											self.popups_created.append(path_path_popup)
											for folder in folders:
												dest_path = folder['path']
												with dpg.group(horizontal=True):
													dpg.add_image(icon_tag_folder, width=16*icon_size, height=16*icon_size)
													dpg.add_selectable(label=folder['name'], callback=_fb_set_path_from_breadcrumb, user_data=dest_path)
										
									dpg.bind_item_handler_registry(folder_name, f'{tag_prefix}_edit_path_handler')
								
								dpg.add_spacer(width=-1)		
								# hide duplicate '/' char on non windows platforms
								if os.name != 'nt':
									first_entry = dpg.get_item_children(breadcrumb_row, 1)[0]
									dpg.configure_item(first_entry, show=False)
								
		# reload files list when clicking on breadcrumb button
		def _fb_set_path_from_breadcrumb(sender, app_data, user_data):
			nonlocal _fb_prevpath 
			_fb_prevpath = dpg.get_value(f'{tag_prefix}_path')
			dpg.set_value(f'{tag_prefix}_path', user_data)
			_fb_populate_files()

		
		# scan folder and rebuild files list
		def _fb_populate_files():
			
			nonlocal show_hidden_files
			nonlocal allow_drag
			nonlocal _fb_current_sorting_type
			nonlocal _fb_current_sorting_desc
			
			current_path = pathlib.Path(dpg.get_value(f'{tag_prefix}_path')).expanduser()

			sort_type       = _fb_current_sorting_type
			sort_descending = _fb_current_sorting_desc
			dir_status = {}
			
			# only rebuild if clicking on a folder
			#   --> checking "str (instead of Path) because Path.is_dir() can raise permission errors!
			if os.path.isdir(str(current_path)):

				# hide path text input and show breadcrumb
				if path_input_style == self.PATH_INPUT_STYLE_BREADCRUMB:
					dpg.configure_item(f'{tag_prefix}_path_input_row', show=False)
					dpg.configure_item(f'{tag_prefix}_breadcrumb_row', show=True)

				hasParentFolder = (str(current_path)!=str(current_path.root))
				
				# clear table
				for child in dpg.get_item_children(f'{tag_prefix}_main_table', 1):
					dpg.delete_item(child)

				# scan root directory
				try:
					scan = list(os.scandir(current_path))
					files = [pathlib.Path(x.path) for x in scan if os.path.isfile(pathlib.PurePath(x))]
					folders = [pathlib.Path(x.path) for x in scan if os.path.isdir(pathlib.PurePath(x))]
				except Exception as err:
					_fb_show_info_box(str(err))
					#_fb_move_back()
					return
				
				# discard hidden files
				if not show_hidden_files:
					files=[x for x in files if not x.name.startswith('.')]
					folders=[x for x in folders if not x.name.startswith('.')]

				# file format filter
				fileformat_filter_tag = f'{tag_prefix}_filetype_filter'
				fileformat_filter_combo_value = dpg.get_value(fileformat_filter_tag)
				fileformat_filter_combo_items = dpg.get_item_configuration(fileformat_filter_tag)['items']
				fileformat_filter_combo_index = fileformat_filter_combo_items.index(fileformat_filter_combo_value)
				fileformat_filter = tuple(filetype_filter[fileformat_filter_combo_index]['formats'])
				fileformat_apply_filter = False if len(fileformat_filter)==1 and fileformat_filter[0]=='*' else True
				if fileformat_apply_filter:
					files = [x for x in files if x.name.lower().endswith(fileformat_filter)]

				# file name filter
				filename_filter = dpg.get_value(f'{tag_prefix}_filename_filter').strip()
				if filename_filter != '':
					files = [x for x in files if filename_filter.lower() in x.name.lower()]
					folders = [x for x in folders if filename_filter.lower() in x.name.lower()]
				if filename_filter!='':
					dpg.bind_item_theme(f'{tag_prefix}_searchbox', _fb_searchbox_active)
				else:
					dpg.bind_item_theme(f'{tag_prefix}_searchbox', None)

				def _fb_get_sequence_size(seq):
					total_size = sum([pathlib.Path(x).stat().st_size for x in seq])
					return total_size

				def _fb_get_sequence_date_modified(seq):
					date_modified = max([datetime.datetime.fromtimestamp(pathlib.Path(x).lstat().st_mtime) for x in seq])
					return date_modified

				# sort columns function
				def _sort_func(file):
					nonlocal sort_type
					if sort_type == 'name':
						if isinstance(file, fileseq.FileSequence):
							filename = pathlib.Path(file[0]).name.lower()
						else:
							filename = pathlib.Path(file).name.lower()
						return filename

					elif sort_type == 'size':
						if isinstance(file, fileseq.FileSequence):
							filesize = _fb_get_sequence_size(file)
						else:
							filesize = file.stat().st_size
						return filesize
						
					elif sort_type == 'date':
						dt_format = '%Y%m%d%H%M%S%f'
						if isinstance(file, fileseq.FileSequence):
							mod_date = _fb_get_sequence_date_modified(file).strftime(dt_format)
						else:
							mod_date = datetime.datetime.fromtimestamp(file.lstat().st_mtime).strftime(dt_format)
						return mod_date

				# sort folders
				folders = sorted(folders, key=_sort_func, reverse=sort_descending)

				parent_entry = {
					'name': '..',
					'path': str(current_path.parent),
					'size': -1,
					'date_modified': datetime.datetime.fromtimestamp(current_path.lstat().st_mtime),
					'is_folder': True,
					'is_sequence': False,
					'sequence': None,
					'is_link': False,
				}
				entries = [] if not hasParentFolder else [parent_entry]
				dir_status['folders']=len(folders)
				for folder in folders:
					folder_entry = {
						'name': folder.name,
						'path': str(folder),
						'size': -1,
						'date_modified': datetime.datetime.fromtimestamp(folder.lstat().st_mtime),
						'is_folder': True,
						'is_sequence': False,
						'sequence': None,	
						'is_link': folder.is_symlink(),
					}
					entries.append(folder_entry)


				if not dirs_only:
					# handle collapsed sequences
					collapse_sequences = dpg.get_value(f'{tag_prefix}_collapse_sequences')
					seq_str = ''
					if collapse_sequences:
						
						# filters: file format / show hidden
						seqs = fileseq.findSequencesOnDisk(str(current_path), include_hidden=show_hidden_files)
						if fileformat_apply_filter:
							seqs = [x for x in seqs if len(x)>1 and x[0].endswith(fileformat_filter)]
						else:
							seqs = [x for x in seqs if len(x)>1]

						dir_status['files']=len(files)

						# file name filter
						seqs = [x for x in seqs if filename_filter.lower() in x.basename().lower()]		
						seq_str = f' ({len(seqs)} sequences) '
						seq_files_collapsed = [f'{x.dirname()}{x.basename()}{sequence_padding*len(str(x.end()))}{x.extension()} ({x.frameRange()})' for x in seqs]
						seq_files_as_path = [pathlib.Path(x) for seq in seqs for x in seq]
						seq_files_as_fseq = [x for x in seqs]
						non_seq_files = [x for x in files if x not in seq_files_as_path and not os.path.isdir(str(x))]
						files = non_seq_files
						files.extend(seq_files_as_fseq)
						files = sorted(files, key=_sort_func, reverse=sort_descending)
						
						dir_status['sequences']=len(seq_files_as_fseq)

						for file in files:
							if isinstance(file, fileseq.FileSequence):
								padding_str = ['#']*len(str(file.frameRange()).split('-')[0])
								padding_str = '\r'.join(padding_str)  # the '\r' is needed for dpg to correctly display multiple '#' chars together! 

								file_entry = {
									'name': f'{file.basename()}{padding_str}{file.extension()} ({file.frameRange()})',
									'path': f'{file.dirname()}{file.basename()}{sequence_padding*len(str(file.end()))}{file.extension()} ({file.frameRange()})',
									'size': _fb_get_sequence_size(file),
									'date_modified': _fb_get_sequence_date_modified(file),
									'is_folder': False,
									'is_sequence': True,
									'sequence': file,
									'is_link': False,
								}
							else:
								file_entry = {
									'name': file.name,
									'path': str(file),
									'size': file.stat().st_size if os.path.isfile(str(file)) else -1,
									'date_modified': datetime.datetime.fromtimestamp(file.lstat().st_mtime),
									'is_folder': False,
									'is_sequence': False,
									'sequence': None,	
									'is_link': False,
								}
							entries.append(file_entry)

					# handle non-collapsed sequences
					else:
						# sort
						files = sorted(files, key=_sort_func, reverse=sort_descending)
						for file in files:
							file_entry = {
									'name': file.name,
									'path': str(file),
									'size': file.stat().st_size if os.path.isfile(str(file)) else -1,
									'date_modified': datetime.datetime.fromtimestamp(file.lstat().st_mtime),
									'is_folder': False,
									'is_sequence': False,
									'sequence': None,	
									'is_link': False,
								}
							entries.append(file_entry)

						dir_status['files']=len(files)

				# build rows
				cells_name = []
				for i, entry in enumerate(entries):
					
					# add entry row
					row = dpg.add_table_row(parent=f'{tag_prefix}_main_table', user_data=entry)
					grp = dpg.add_group(parent=row, horizontal=True, height=16*icon_size, user_data='file_entry')

					icon = icon_tag_file
					if entry['is_folder']:
						icon = icon_tag_link if entry['is_link'] else icon_tag_folder

					filetype_icon = dpg.add_image(icon, parent=grp, width=16*icon_size, height=16*icon_size, user_data=entry)

					cell_name = dpg.add_selectable(label=entry['name'], user_data=entry, parent=grp, height=16*icon_size, span_columns=True)
					cell_size = dpg.add_selectable(label=_fileSizeFormatter(entry['size']), user_data=entry, parent=row, height=16*icon_size, span_columns=True)
					cell_date = dpg.add_selectable(label=_dateFormatter(entry['date_modified']), user_data=entry, parent=row, height=16*icon_size, span_columns=True)
					
					cells_name.append(cell_name)

					# add tooltip to help visualize larger file names
					if add_filename_tooltip and len(entry['name']) > tooltip_min_length:
						filename_tooltip = dpg.add_tooltip(parent=cell_name)
						dpg.add_text(entry['name'], parent=filename_tooltip, wrap=300)

					# add drag payload
					if allow_drag:
						drag_payload = dpg.add_drag_payload(parent=cell_name, payload_type=fb_payload_type, tag=f'{tag_prefix}_drag_payload_{cell_name}')
						dpg.add_image(icon_tag_drag, parent=drag_payload)
					
					# bind handlers
					dpg.bind_item_handler_registry(filetype_icon, f'{tag_prefix}_file_click_handler')
					dpg.bind_item_handler_registry(cell_name,     f'{tag_prefix}_file_click_handler')
					dpg.bind_item_handler_registry(cell_size,     f'{tag_prefix}_file_click_handler')
					dpg.bind_item_handler_registry(cell_date,     f'{tag_prefix}_file_click_handler')


				# add multi-selection behavior callback
				for cell in cells_name:
					cell_user_data = dpg.get_item_configuration(cell)['user_data']
					cell_user_data['all_selectables'] = cells_name
					dpg.configure_item(cell, callback=_fb_selection, user_data=cell_user_data)

				# display folder status (num folders, num files, num sequences)
				dir_status_str = f'{dir_status["folders"]} folders'
				if not dirs_only:
					dir_status_str += f', {dir_status["files"]} files'
					dir_status_str = dir_status_str+f' ({dir_status["sequences"]} sequences)' if collapse_sequences else dir_status_str
				dpg.set_value(f'{tag_prefix}_directory_status', dir_status_str)

				# build breadcrumb
				_fb_build_breadcrumb_path()

			else:
				_fb_show_info_box('Directory not found!')

		# table sorting callback
		def _sort_fb(sender, specs):
			nonlocal _fb_current_sorting_type
			nonlocal _fb_current_sorting_desc
			sort_col_id = specs[0][0]
			sort_col_index = dpg.get_item_children(sender, 0).index(sort_col_id)
			_fb_current_sorting_type = ['name', 'size', 'date'][sort_col_index]
			_fb_current_sorting_desc = specs[0][1]<0
			_fb_populate_files()

		# build filetypes filter combo
		def _fb_built_filetype_filter():
			combo = f'{tag_prefix}_filetype_filter'
			items = []
			for entry in filetype_filter:
				exts = ['*.'+x for x in entry['formats']]
				item = f'{entry["label"]} ({",".join(exts)})'
				items.append(item)
			dpg.configure_item(combo, items=items, user_data=filetype_filter)
			dpg.set_value(combo, items[filetype_filter_default])

		# main filebrowser callback
		def _fb_button_callback(sender, app_data, user_data):
			nonlocal callback
			nonlocal show_as_window
			nonlocal _fb_last_selected
			nonlocal expand_sequences_on_callback
			nonlocal tag_prefix
			nonlocal _fb_item_selected

			cancel_pressed = user_data
			files=['1123','ewrwe']
			if callback:
				
				# get files
				files=[]
				selection=[]
				selectables=[]
				table = f'{tag_prefix}_main_table'
				rows = dpg.get_item_children(table, 1)
				for row in rows:
					grp = dpg.get_item_children(row, 1)[0]
					entry = dpg.get_item_children(grp, 1)[1]
					selectables.append(entry)
					is_selected = dpg.get_item_theme(entry)==dpg.get_alias_id(_fb_item_selected)
					if is_selected: selection.append(entry)
				
				for entry in selection:
					data = dpg.get_item_configuration(entry)['user_data']
					if expand_sequences_on_callback and data['is_sequence']:
						files.extend([x for x in data['sequence']])
					else:
						files.append(data['path'])
			
				if callback.__code__.co_argcount==0: callback()
				if callback.__code__.co_argcount==1: callback(sender)
				if callback.__code__.co_argcount==2: callback(sender, files)
				if callback.__code__.co_argcount==3: callback(sender, files, cancel_pressed)

			if show_as_window: 
				dpg.configure_item(f'{tag_prefix}_window', show=False)
				#clear selection 
				for item in selectables:
					dpg.set_value(item, False)
					dpg.bind_item_theme(item, _fb_item_unselected)
	
		if show_as_window:
			fb_icons_lst = [self.ICON_FILE, self.ICON_FILES, self.ICON_FOLDER]
			fb_icons_sfx = ['file', 'files', 'folder']
			if isinstance(label, tuple) or isinstance(label, list):
				fb_btn_label = label[0]
				fb_win_label = label[1]
			else:
				fb_btn_label = label+' ...' if label not in fb_icons_lst else label
				fb_win_label = label if label not in fb_icons_lst else f'Choose {fb_icons_sfx[fb_icons_lst.index(label)]}'

			if fb_btn_label in fb_icons_lst:
				try: dpg.add_image_button(texture_tag=fb_btn_label, width=16*icon_size, height=16*icon_size, callback=lambda x: dpg.configure_item(f'{tag_prefix}_window', show=True, pos=(dpg.get_mouse_pos()[0]+50, dpg.get_mouse_pos()[1]+80)))
				except: dpg.add_image_button(parent=parent, texture_tag=fb_btn_label, width=16*icon_size, height=16*icon_size, callback=lambda x: dpg.configure_item(f'{tag_prefix}_window', show=True, pos=(dpg.get_mouse_pos()[0]+50, dpg.get_mouse_pos()[1]+80)))
				with dpg.tooltip(parent=dpg.last_item()):
					dpg.add_text(fb_win_label)
			else:
				try: dpg.add_button(label=fb_btn_label, callback=lambda x: dpg.configure_item(f'{tag_prefix}_window', show=True, pos=(dpg.get_mouse_pos()[0]+50, dpg.get_mouse_pos()[1]+80)))
				except: dpg.add_button(parent=parent, label=fb_btn_label, callback=lambda x: dpg.configure_item(f'{tag_prefix}_window', show=True, pos=(dpg.get_mouse_pos()[0]+50, dpg.get_mouse_pos()[1]+80)))

			fb_parent = dpg.add_window(tag=f'{tag_prefix}_window', label=fb_win_label, show=False, modal=modal_window, width=width, height=height)

		# UI layout table
		with dpg.table(
			tag=f'{tag_prefix}_layout_table',
			header_row=False, 
			resizable=False, 
			borders_innerV=False, 
			borders_innerH=False,
			parent=fb_parent,
			width=width*0.97,
			):

			self.root = f'{tag_prefix}_layout_table'
			
			dpg.add_table_column()

			# current folder path (as text)
			with dpg.table_row(tag=f'{tag_prefix}_path_input_row', show=path_input_style!=self.PATH_INPUT_STYLE_BREADCRUMB): 
				with dpg.group(horizontal=True):

					if path_input_style==self.PATH_INPUT_STYLE_TEXT_ONLY:
						if show_nav_icons:
							# go back
							dpg.add_button(arrow=True, direction=internal_dpg.mvDir_Left, callback=_fb_move_back)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('Go Back')
							
							# go up
							dpg.add_button(arrow=True, direction=internal_dpg.mvDir_Up, callback=_fb_move_up)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('Go Up')
							
							# add new folder
							dpg.add_image_button(icon_tag_addfolder, width=14*icon_size, height=14*icon_size, tag=f'{tag_prefix}_add_folder_btn', show=allow_create_new_folder)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('Create new folder')
							with dpg.popup(parent=f'{tag_prefix}_add_folder_btn', no_move=True, mousebutton=internal_dpg.mvMouseButton_Left, min_size=(280,40), max_size=(280,40)) as _fb_new_folder_popup:
								self.popups_created.append(_fb_new_folder_popup)
								with dpg.group(horizontal=True):
									dpg.add_text('Name')
									dpg.add_input_text(tag=f'{tag_prefix}_new_folder_name', width=150, callback=_fb_add_folder, on_enter=True)
									dpg.add_button(label=' create ', small=True, callback=_fb_add_folder)
							dpg.bind_item_theme(_fb_new_folder_popup, _fb_popup_border)

							# user home folder
							dpg.add_image_button(icon_tag_home, width=14*icon_size, height=14*icon_size, callback=_fb_goto_home)
							with dpg.tooltip(parent=dpg.last_item()):
								dpg.add_text('User home')

					# input path
					#dpg.add_text('Folder')
					dpg.add_input_text(tag=f'{tag_prefix}_path', default_value=default_path, callback=_fb_populate_files, width=-1, on_enter=True)
					
			# current folder path (as breadcrumb)
			with dpg.table_row(tag=f'{tag_prefix}_breadcrumb_row'): 
				pass
				
			# folder status and filename filter	
			with dpg.table_row(): 

				with dpg.group(horizontal=True):
					dpg.add_text('10 Folders, 10 Files (10 Sequences)', tag=f'{tag_prefix}_directory_status')
					dpg.add_spacer(width=50)
					dpg.add_text('Search:', tag=f'{tag_prefix}_searchbox')
					with dpg.tooltip(dpg.last_item()):
						dpg.add_text('Case insensitive search term')
					dpg.add_input_text(tag=f'{tag_prefix}_filename_filter', width=-1, callback=_fb_populate_files)

			# main file list table
			with dpg.table_row(): 

				with dpg.table(
					tag=f'{tag_prefix}_main_table',
					height=height*0.76,
					resizable=True, 
					policy=dpg.mvTable_SizingStretchProp, 
					borders_innerV=True, 
					reorderable=True, 
					hideable=True,
					sortable=True,
					scrollX=True,
					scrollY=True,
					callback=_sort_fb,
					):
					dpg.add_table_column(label='Name',     init_width_or_weight=col_widths[0])
					dpg.add_table_column(label='Size',     init_width_or_weight=col_widths[1])
					dpg.add_table_column(label='Modified', init_width_or_weight=col_widths[2])

					def _fb_set_table_height_to_parent_height():
						height = dpg.get_item_rect_size(dpg.get_item_parent(f'{tag_prefix}_layout_table'))
						height = height[1] * 0.8
						dpg.configure_item(f'{tag_prefix}_main_table', height=height)
					#dpg.set_frame_callback(2, _fb_set_table_height_to_parent_height)

			# collapse sequences and filetype filter
			with dpg.table_row(): 

				with dpg.group(horizontal=True):
					dpg.add_checkbox(label='Collapse sequences', default_value=collapse_sequences, show=collapse_sequences_checkbox, tag=f'{tag_prefix}_collapse_sequences', callback=_fb_populate_files)
					dpg.add_spacer(width=50)
					dpg.add_text('File type filter')
					dpg.add_combo(tag=f'{tag_prefix}_filetype_filter', width=-1, callback=_fb_populate_files)

			# OK / Cancel buttons
			with dpg.table_row(): 
				with dpg.group(horizontal=True, show=show_ok_cancel):
					dpg.add_spacer(width=width*0.78)
					with dpg.group(width=-1):
						with dpg.table(header_row=False, height=30):
							dpg.add_table_column()
							with dpg.table_row():
								with dpg.group(horizontal=True):
									dpg.add_button(label="   OK   ", callback=_fb_button_callback, user_data=False)
									dpg.add_button(label=" Cancel ", callback=_fb_button_callback, user_data=True)


		# init handlers
		if first_instance:
			
			# for when user double-clicks breadcrumb items to manually edit path
			with dpg.item_handler_registry(tag=f'{tag_prefix}_edit_path_handler'):
				dpg.add_item_double_clicked_handler(callback=_fb_show_path_text_input)

			# for when user presses "ESC" key while editing path
			with dpg.handler_registry(tag=f'{tag_prefix}_esc_path_handler'):
				dpg.add_key_press_handler(callback=_fb_esc_path, key=internal_dpg.mvKey_Escape)

			# for when user clicks a file or folder (used to set drag_data dynamically)
			# this is replacing the regular item callback because that callback always triggers AFTER the drag event, making it impossible for us to define drag_data dynamically.
			with dpg.item_handler_registry(tag=f'{tag_prefix}_file_click_handler'):
				dpg.add_item_clicked_handler(callback=_fb_file_click, button=internal_dpg.mvMouseButton_Left)


		# init UI data
		_fb_built_filetype_filter()
		_fb_populate_files()


